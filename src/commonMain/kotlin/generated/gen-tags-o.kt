package kotlinx.html

import kotlin.contracts.ExperimentalContracts
import kotlin.contracts.InvocationKind
import kotlin.contracts.contract
import kotlinx.html.*
import kotlinx.html.impl.*
import kotlinx.html.attributes.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

@Suppress("unused")
open class OBJECT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("object", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {
    var data : String
        get()  = attributeStringString[this, "data"]
        set(newValue) {attributeStringString[this, "data"] = newValue}

    var type : String
        get()  = attributeStringString[this, "type"]
        set(newValue) {attributeStringString[this, "type"] = newValue}

    var height : String
        get()  = attributeStringString[this, "height"]
        set(newValue) {attributeStringString[this, "height"] = newValue}

    var width : String
        get()  = attributeStringString[this, "width"]
        set(newValue) {attributeStringString[this, "width"] = newValue}

    var usemap : String
        get()  = attributeStringString[this, "usemap"]
        set(newValue) {attributeStringString[this, "usemap"] = newValue}

    var name : String
        get()  = attributeStringString[this, "name"]
        set(newValue) {attributeStringString[this, "name"] = newValue}

    var form : String
        get()  = attributeStringString[this, "form"]
        set(newValue) {attributeStringString[this, "form"] = newValue}

    var classId : String
        get()  = attributeStringString[this, "classid"]
        set(newValue) {attributeStringString[this, "classid"] = newValue}


}
/**
 * Named property value
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun OBJECT.param(name : String? = null, value : String? = null, classes : String? = null, crossinline block : PARAM.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    PARAM(attributesMapOf("name", name,"value", value,"class", classes), consumer).visit(block)
}

val OBJECT.asFlowContent : FlowContent
    get()  = this

val OBJECT.asInteractiveContent : InteractiveContent
    get()  = this

val OBJECT.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
open class OL(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("ol", consumer, initialAttributes, null, false, false), HtmlBlockTag {
    var start : String
        get()  = attributeStringString[this, "start"]
        set(newValue) {attributeStringString[this, "start"] = newValue}

    var reversed : Boolean
        get()  = attributeBooleanTicker[this, "reversed"]
        set(newValue) {attributeBooleanTicker[this, "reversed"] = newValue}


}
/**
 * List item
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun OL.li(classes : String? = null, crossinline block : LI.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    LI(attributesMapOf("class", classes), consumer).visit(block)
}


@Suppress("unused")
open class OPTGROUP(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("optgroup", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacade {
    var disabled : Boolean
        get()  = attributeBooleanTicker[this, "disabled"]
        set(newValue) {attributeBooleanTicker[this, "disabled"] = newValue}

    var label : String
        get()  = attributeStringString[this, "label"]
        set(newValue) {attributeStringString[this, "label"] = newValue}


}
/**
 * Selectable choice
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun OPTGROUP.option(classes : String? = null, crossinline block : OPTION.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    OPTION(attributesMapOf("class", classes), consumer).visit(block)
}
/**
 * Selectable choice
 */
@HtmlTagMarker
fun OPTGROUP.option(classes : String? = null, content : String = "") : Unit = OPTION(attributesMapOf("class", classes), consumer).visit({+content})


@Suppress("unused")
open class OPTION(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("option", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacade {
    var disabled : Boolean
        get()  = attributeBooleanTicker[this, "disabled"]
        set(newValue) {attributeBooleanTicker[this, "disabled"] = newValue}

    var selected : Boolean
        get()  = attributeBooleanTicker[this, "selected"]
        set(newValue) {attributeBooleanTicker[this, "selected"] = newValue}

    var label : String
        get()  = attributeStringString[this, "label"]
        set(newValue) {attributeStringString[this, "label"] = newValue}

    var value : String
        get()  = attributeStringString[this, "value"]
        set(newValue) {attributeStringString[this, "value"] = newValue}


}

@Suppress("unused")
open class OUTPUT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("output", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {
    var htmlFor : String
        get()  = attributeStringString[this, "for"]
        set(newValue) {attributeStringString[this, "for"] = newValue}

    var form : String
        get()  = attributeStringString[this, "form"]
        set(newValue) {attributeStringString[this, "form"] = newValue}

    var name : String
        get()  = attributeStringString[this, "name"]
        set(newValue) {attributeStringString[this, "name"] = newValue}


}
val OUTPUT.asFlowContent : FlowContent
    get()  = this

val OUTPUT.asPhrasingContent : PhrasingContent
    get()  = this


