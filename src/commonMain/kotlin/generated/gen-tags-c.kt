package kotlinx.html

import kotlin.contracts.ExperimentalContracts
import kotlin.contracts.InvocationKind
import kotlin.contracts.contract
import kotlinx.html.*
import kotlinx.html.impl.*
import kotlinx.html.attributes.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

@Suppress("unused")
open class CANVAS(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("canvas", consumer, initialAttributes, null, false, false), HtmlBlockInlineTag {
    var width : String
        get()  = attributeStringString[this, "width"]
        set(newValue) {attributeStringString[this, "width"] = newValue}

    var height : String
        get()  = attributeStringString[this, "height"]
        set(newValue) {attributeStringString[this, "height"] = newValue}


}
val CANVAS.asFlowContent : FlowContent
    get()  = this

val CANVAS.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
open class CAPTION(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("caption", consumer, initialAttributes, null, false, false), HtmlBlockTag {

}

@Suppress("unused")
open class CITE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("cite", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {

}
val CITE.asFlowContent : FlowContent
    get()  = this

val CITE.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
open class CODE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("code", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {

}
val CODE.asFlowContent : FlowContent
    get()  = this

val CODE.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
open class COL(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("col", consumer, initialAttributes, null, false, true), CommonAttributeGroupFacade {
    var span : String
        get()  = attributeStringString[this, "span"]
        set(newValue) {attributeStringString[this, "span"] = newValue}


}

@Suppress("unused")
open class COLGROUP(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("colgroup", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade {
    var span : String
        get()  = attributeStringString[this, "span"]
        set(newValue) {attributeStringString[this, "span"] = newValue}


}
/**
 * Table column
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun COLGROUP.col(classes : String? = null, crossinline block : COL.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    COL(attributesMapOf("class", classes), consumer).visit(block)
}


@Suppress("unused")
open class COMMAND(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("command", consumer, initialAttributes, null, true, true), CommonAttributeGroupFacadeFlowMetaDataPhrasingContent {
    var type : CommandType
        get()  = attributeCommandTypeEnumCommandTypeValues[this, "type"]
        set(newValue) {attributeCommandTypeEnumCommandTypeValues[this, "type"] = newValue}

    var label : String
        get()  = attributeStringString[this, "label"]
        set(newValue) {attributeStringString[this, "label"] = newValue}

    var icon : String
        get()  = attributeStringString[this, "icon"]
        set(newValue) {attributeStringString[this, "icon"] = newValue}

    var disabled : Boolean
        get()  = attributeBooleanTicker[this, "disabled"]
        set(newValue) {attributeBooleanTicker[this, "disabled"] = newValue}

    var checked : Boolean
        get()  = attributeBooleanTicker[this, "checked"]
        set(newValue) {attributeBooleanTicker[this, "checked"] = newValue}

    var radioGroup : String
        get()  = attributeStringString[this, "radiogroup"]
        set(newValue) {attributeStringString[this, "radiogroup"] = newValue}


}
val COMMAND.asFlowContent : FlowContent
    get()  = this

val COMMAND.asMetaDataContent : MetaDataContent
    get()  = this

val COMMAND.asPhrasingContent : PhrasingContent
    get()  = this


