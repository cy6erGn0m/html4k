package kotlinx.html

import kotlin.contracts.ExperimentalContracts
import kotlin.contracts.InvocationKind
import kotlin.contracts.contract
import kotlinx.html.*
import kotlinx.html.impl.*
import kotlinx.html.attributes.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

@Suppress("unused")
open class U(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("u", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {

}
val U.asFlowContent : FlowContent
    get()  = this

val U.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
open class UL(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("ul", consumer, initialAttributes, null, false, false), HtmlBlockTag {

}
/**
 * List item
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun UL.li(classes : String? = null, crossinline block : LI.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    LI(attributesMapOf("class", classes), consumer).visit(block)
}


