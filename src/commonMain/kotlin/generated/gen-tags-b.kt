package kotlinx.html

import kotlin.contracts.ExperimentalContracts
import kotlin.contracts.InvocationKind
import kotlin.contracts.contract
import kotlinx.html.*
import kotlinx.html.impl.*
import kotlinx.html.attributes.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

@Suppress("unused")
open class B(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("b", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {

}
val B.asFlowContent : FlowContent
    get()  = this

val B.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
open class BASE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("base", consumer, initialAttributes, null, true, true), HtmlHeadTag {
    var href : String
        get()  = attributeStringString[this, "href"]
        set(newValue) {attributeStringString[this, "href"] = newValue}

    var target : String
        get()  = attributeStringString[this, "target"]
        set(newValue) {attributeStringString[this, "target"] = newValue}


}

@Suppress("unused")
open class BDI(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("bdi", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {

}
val BDI.asFlowContent : FlowContent
    get()  = this

val BDI.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
open class BDO(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("bdo", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {

}
val BDO.asFlowContent : FlowContent
    get()  = this

val BDO.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
open class BLOCKQUOTE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("blockquote", consumer, initialAttributes, null, false, false), HtmlBlockTag {
    var cite : String
        get()  = attributeStringString[this, "cite"]
        set(newValue) {attributeStringString[this, "cite"] = newValue}


}

@Suppress("unused")
open class BODY(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("body", consumer, initialAttributes, null, false, false), HtmlBlockTag {
    var onAfterprint : String
        get()  = attributeStringString[this, "onafterprint"]
        set(newValue) {attributeStringString[this, "onafterprint"] = newValue}

    var onBeforeprint : String
        get()  = attributeStringString[this, "onbeforeprint"]
        set(newValue) {attributeStringString[this, "onbeforeprint"] = newValue}

    var onBeforeunLoad : String
        get()  = attributeStringString[this, "onbeforeunload"]
        set(newValue) {attributeStringString[this, "onbeforeunload"] = newValue}

    var onHashChange : String
        get()  = attributeStringString[this, "onhashchange"]
        set(newValue) {attributeStringString[this, "onhashchange"] = newValue}

    var onMessage : String
        get()  = attributeStringString[this, "onmessage"]
        set(newValue) {attributeStringString[this, "onmessage"] = newValue}

    var onOffline : String
        get()  = attributeStringString[this, "onoffline"]
        set(newValue) {attributeStringString[this, "onoffline"] = newValue}

    var onOnline : String
        get()  = attributeStringString[this, "ononline"]
        set(newValue) {attributeStringString[this, "ononline"] = newValue}

    var onPopstate : String
        get()  = attributeStringString[this, "onpopstate"]
        set(newValue) {attributeStringString[this, "onpopstate"] = newValue}

    var onRedo : String
        get()  = attributeStringString[this, "onredo"]
        set(newValue) {attributeStringString[this, "onredo"] = newValue}

    var onResize : String
        get()  = attributeStringString[this, "onresize"]
        set(newValue) {attributeStringString[this, "onresize"] = newValue}

    var onStorage : String
        get()  = attributeStringString[this, "onstorage"]
        set(newValue) {attributeStringString[this, "onstorage"] = newValue}

    var onUndo : String
        get()  = attributeStringString[this, "onundo"]
        set(newValue) {attributeStringString[this, "onundo"] = newValue}

    var onUnLoad : String
        get()  = attributeStringString[this, "onunload"]
        set(newValue) {attributeStringString[this, "onunload"] = newValue}


}

@Suppress("unused")
open class BR(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("br", consumer, initialAttributes, null, true, true), HtmlBlockInlineTag {

}
val BR.asFlowContent : FlowContent
    get()  = this

val BR.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
open class BUTTON(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("button", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {
    var autoFocus : Boolean
        get()  = attributeBooleanTicker[this, "autofocus"]
        set(newValue) {attributeBooleanTicker[this, "autofocus"] = newValue}

    var disabled : Boolean
        get()  = attributeBooleanTicker[this, "disabled"]
        set(newValue) {attributeBooleanTicker[this, "disabled"] = newValue}

    var form : String
        get()  = attributeStringString[this, "form"]
        set(newValue) {attributeStringString[this, "form"] = newValue}

    var formAction : String
        get()  = attributeStringString[this, "formaction"]
        set(newValue) {attributeStringString[this, "formaction"] = newValue}

    var formEncType : ButtonFormEncType
        get()  = attributeButtonFormEncTypeEnumButtonFormEncTypeValues[this, "formenctype"]
        set(newValue) {attributeButtonFormEncTypeEnumButtonFormEncTypeValues[this, "formenctype"] = newValue}

    var formMethod : ButtonFormMethod
        get()  = attributeButtonFormMethodEnumButtonFormMethodValues[this, "formmethod"]
        set(newValue) {attributeButtonFormMethodEnumButtonFormMethodValues[this, "formmethod"] = newValue}

    var formNovalidate : Boolean
        get()  = attributeBooleanTicker[this, "formnovalidate"]
        set(newValue) {attributeBooleanTicker[this, "formnovalidate"] = newValue}

    var formTarget : String
        get()  = attributeStringString[this, "formtarget"]
        set(newValue) {attributeStringString[this, "formtarget"] = newValue}

    var name : String
        get()  = attributeStringString[this, "name"]
        set(newValue) {attributeStringString[this, "name"] = newValue}

    var value : String
        get()  = attributeStringString[this, "value"]
        set(newValue) {attributeStringString[this, "value"] = newValue}

    var type : ButtonType
        get()  = attributeButtonTypeEnumButtonTypeValues[this, "type"]
        set(newValue) {attributeButtonTypeEnumButtonTypeValues[this, "type"] = newValue}


}
val BUTTON.asFlowContent : FlowContent
    get()  = this

val BUTTON.asInteractiveContent : InteractiveContent
    get()  = this

val BUTTON.asPhrasingContent : PhrasingContent
    get()  = this


