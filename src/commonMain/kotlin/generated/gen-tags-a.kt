package kotlinx.html

import kotlin.contracts.ExperimentalContracts
import kotlin.contracts.InvocationKind
import kotlin.contracts.contract
import kotlinx.html.*
import kotlinx.html.impl.*
import kotlinx.html.attributes.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

@Suppress("unused")
open class A(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("a", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {
    var href : String
        get()  = attributeStringString[this, "href"]
        set(newValue) {attributeStringString[this, "href"] = newValue}

    var target : String
        get()  = attributeStringString[this, "target"]
        set(newValue) {attributeStringString[this, "target"] = newValue}

    var ping : String
        get()  = attributeStringString[this, "ping"]
        set(newValue) {attributeStringString[this, "ping"] = newValue}

    var rel : String
        get()  = attributeStringString[this, "rel"]
        set(newValue) {attributeStringString[this, "rel"] = newValue}

    var hrefLang : String
        get()  = attributeStringString[this, "hreflang"]
        set(newValue) {attributeStringString[this, "hreflang"] = newValue}

    var type : String
        get()  = attributeStringString[this, "type"]
        set(newValue) {attributeStringString[this, "type"] = newValue}

    var referrerPolicy : AReferrerPolicy
        get()  = attributeAReferrerPolicyEnumAReferrerPolicyValues[this, "referrerpolicy"]
        set(newValue) {attributeAReferrerPolicyEnumAReferrerPolicyValues[this, "referrerpolicy"] = newValue}

    var media : String
        get()  = attributeStringString[this, "media"]
        set(newValue) {attributeStringString[this, "media"] = newValue}

    var downLoad : String
        get()  = attributeStringString[this, "download"]
        set(newValue) {attributeStringString[this, "download"] = newValue}


}
val A.asFlowContent : FlowContent
    get()  = this

val A.asInteractiveContent : InteractiveContent
    get()  = this

val A.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
open class ABBR(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("abbr", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {

}
val ABBR.asFlowContent : FlowContent
    get()  = this

val ABBR.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
open class ADDRESS(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("address", consumer, initialAttributes, null, false, false), HtmlBlockTag {

}

@Suppress("unused")
open class AREA(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("area", consumer, initialAttributes, null, true, true), HtmlBlockInlineTag {
    var shape : AreaShape
        get()  = attributeAreaShapeEnumAreaShapeValues[this, "shape"]
        set(newValue) {attributeAreaShapeEnumAreaShapeValues[this, "shape"] = newValue}

    var coords : String
        get()  = attributeStringString[this, "coords"]
        set(newValue) {attributeStringString[this, "coords"] = newValue}

    var href : String
        get()  = attributeStringString[this, "href"]
        set(newValue) {attributeStringString[this, "href"] = newValue}

    var hrefLang : String
        get()  = attributeStringString[this, "hreflang"]
        set(newValue) {attributeStringString[this, "hreflang"] = newValue}

    var alt : String
        get()  = attributeStringString[this, "alt"]
        set(newValue) {attributeStringString[this, "alt"] = newValue}

    var target : String
        get()  = attributeStringString[this, "target"]
        set(newValue) {attributeStringString[this, "target"] = newValue}

    var media : String
        get()  = attributeStringString[this, "media"]
        set(newValue) {attributeStringString[this, "media"] = newValue}

    var rel : String
        get()  = attributeStringString[this, "rel"]
        set(newValue) {attributeStringString[this, "rel"] = newValue}

    var ping : String
        get()  = attributeStringString[this, "ping"]
        set(newValue) {attributeStringString[this, "ping"] = newValue}

    var type : String
        get()  = attributeStringString[this, "type"]
        set(newValue) {attributeStringString[this, "type"] = newValue}


}
val AREA.asFlowContent : FlowContent
    get()  = this

val AREA.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
open class ARTICLE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("article", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowSectioningContent {

}
val ARTICLE.asFlowContent : FlowContent
    get()  = this

val ARTICLE.asSectioningContent : SectioningContent
    get()  = this


@Suppress("unused")
open class ASIDE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("aside", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowSectioningContent {

}
val ASIDE.asFlowContent : FlowContent
    get()  = this

val ASIDE.asSectioningContent : SectioningContent
    get()  = this


@Suppress("unused")
open class AUDIO(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("audio", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {
    var src : String
        get()  = attributeStringString[this, "src"]
        set(newValue) {attributeStringString[this, "src"] = newValue}

    var autoBuffer : Boolean
        get()  = attributeBooleanTicker[this, "autobuffer"]
        set(newValue) {attributeBooleanTicker[this, "autobuffer"] = newValue}

    var autoPlay : Boolean
        get()  = attributeBooleanTicker[this, "autoplay"]
        set(newValue) {attributeBooleanTicker[this, "autoplay"] = newValue}

    var loop : Boolean
        get()  = attributeBooleanTicker[this, "loop"]
        set(newValue) {attributeBooleanTicker[this, "loop"] = newValue}

    var controls : Boolean
        get()  = attributeBooleanTicker[this, "controls"]
        set(newValue) {attributeBooleanTicker[this, "controls"] = newValue}


}
/**
 * Media source for 
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun AUDIO.source(classes : String? = null, crossinline block : SOURCE.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    SOURCE(attributesMapOf("class", classes), consumer).visit(block)
}

val AUDIO.asFlowContent : FlowContent
    get()  = this

val AUDIO.asInteractiveContent : InteractiveContent
    get()  = this

val AUDIO.asPhrasingContent : PhrasingContent
    get()  = this


