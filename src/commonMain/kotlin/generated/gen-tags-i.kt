package kotlinx.html

import kotlin.contracts.ExperimentalContracts
import kotlin.contracts.InvocationKind
import kotlin.contracts.contract
import kotlinx.html.*
import kotlinx.html.impl.*
import kotlinx.html.attributes.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

@Suppress("unused")
open class I(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("i", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {

}
val I.asFlowContent : FlowContent
    get()  = this

val I.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
open class IFRAME(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("iframe", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {
    var name : String
        get()  = attributeStringString[this, "name"]
        set(newValue) {attributeStringString[this, "name"] = newValue}

    var src : String
        get()  = attributeStringString[this, "src"]
        set(newValue) {attributeStringString[this, "src"] = newValue}

    var height : String
        get()  = attributeStringString[this, "height"]
        set(newValue) {attributeStringString[this, "height"] = newValue}

    var width : String
        get()  = attributeStringString[this, "width"]
        set(newValue) {attributeStringString[this, "width"] = newValue}

    var sandbox : IframeSandbox
        get()  = attributeIframeSandboxEnumIframeSandboxValues[this, "sandbox"]
        set(newValue) {attributeIframeSandboxEnumIframeSandboxValues[this, "sandbox"] = newValue}

    var seamless : Boolean
        get()  = attributeBooleanTicker[this, "seamless"]
        set(newValue) {attributeBooleanTicker[this, "seamless"] = newValue}


}
val IFRAME.asFlowContent : FlowContent
    get()  = this

val IFRAME.asInteractiveContent : InteractiveContent
    get()  = this

val IFRAME.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
open class IMG(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("img", consumer, initialAttributes, null, true, true), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {
    var alt : String
        get()  = attributeStringString[this, "alt"]
        set(newValue) {attributeStringString[this, "alt"] = newValue}

    var src : String
        get()  = attributeStringString[this, "src"]
        set(newValue) {attributeStringString[this, "src"] = newValue}

    var height : String
        get()  = attributeStringString[this, "height"]
        set(newValue) {attributeStringString[this, "height"] = newValue}

    var width : String
        get()  = attributeStringString[this, "width"]
        set(newValue) {attributeStringString[this, "width"] = newValue}

    var usemap : String
        get()  = attributeStringString[this, "usemap"]
        set(newValue) {attributeStringString[this, "usemap"] = newValue}

    var ismap : Boolean
        get()  = attributeBooleanTicker[this, "ismap"]
        set(newValue) {attributeBooleanTicker[this, "ismap"] = newValue}

    var loading : ImgLoading
        get()  = attributeImgLoadingEnumImgLoadingValues[this, "loading"]
        set(newValue) {attributeImgLoadingEnumImgLoadingValues[this, "loading"] = newValue}


}
val IMG.asFlowContent : FlowContent
    get()  = this

val IMG.asInteractiveContent : InteractiveContent
    get()  = this

val IMG.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
open class INPUT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("input", consumer, initialAttributes, null, true, true), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {
    var type : InputType
        get()  = attributeInputTypeEnumInputTypeValues[this, "type"]
        set(newValue) {attributeInputTypeEnumInputTypeValues[this, "type"] = newValue}

    var accept : String
        get()  = attributeStringString[this, "accept"]
        set(newValue) {attributeStringString[this, "accept"] = newValue}

    var alt : String
        get()  = attributeStringString[this, "alt"]
        set(newValue) {attributeStringString[this, "alt"] = newValue}

    var autoFocus : Boolean
        get()  = attributeBooleanTicker[this, "autofocus"]
        set(newValue) {attributeBooleanTicker[this, "autofocus"] = newValue}

    var autoComplete : Boolean
        get()  = attributeBooleanBooleanOnOff[this, "autocomplete"]
        set(newValue) {attributeBooleanBooleanOnOff[this, "autocomplete"] = newValue}

    var checked : Boolean
        get()  = attributeBooleanTicker[this, "checked"]
        set(newValue) {attributeBooleanTicker[this, "checked"] = newValue}

    var disabled : Boolean
        get()  = attributeBooleanTicker[this, "disabled"]
        set(newValue) {attributeBooleanTicker[this, "disabled"] = newValue}

    var form : String
        get()  = attributeStringString[this, "form"]
        set(newValue) {attributeStringString[this, "form"] = newValue}

    var formAction : String
        get()  = attributeStringString[this, "formaction"]
        set(newValue) {attributeStringString[this, "formaction"] = newValue}

    var formEncType : InputFormEncType
        get()  = attributeInputFormEncTypeEnumInputFormEncTypeValues[this, "formenctype"]
        set(newValue) {attributeInputFormEncTypeEnumInputFormEncTypeValues[this, "formenctype"] = newValue}

    var formMethod : InputFormMethod
        get()  = attributeInputFormMethodEnumInputFormMethodValues[this, "formmethod"]
        set(newValue) {attributeInputFormMethodEnumInputFormMethodValues[this, "formmethod"] = newValue}

    var formNovalidate : Boolean
        get()  = attributeBooleanTicker[this, "formnovalidate"]
        set(newValue) {attributeBooleanTicker[this, "formnovalidate"] = newValue}

    var formTarget : String
        get()  = attributeStringString[this, "formtarget"]
        set(newValue) {attributeStringString[this, "formtarget"] = newValue}

    var height : String
        get()  = attributeStringString[this, "height"]
        set(newValue) {attributeStringString[this, "height"] = newValue}

    var list : String
        get()  = attributeStringString[this, "list"]
        set(newValue) {attributeStringString[this, "list"] = newValue}

    var max : String
        get()  = attributeStringString[this, "max"]
        set(newValue) {attributeStringString[this, "max"] = newValue}

    var maxLength : String
        get()  = attributeStringString[this, "maxlength"]
        set(newValue) {attributeStringString[this, "maxlength"] = newValue}

    var minLength : String
        get()  = attributeStringString[this, "minlength"]
        set(newValue) {attributeStringString[this, "minlength"] = newValue}

    var min : String
        get()  = attributeStringString[this, "min"]
        set(newValue) {attributeStringString[this, "min"] = newValue}

    var multiple : Boolean
        get()  = attributeBooleanTicker[this, "multiple"]
        set(newValue) {attributeBooleanTicker[this, "multiple"] = newValue}

    var pattern : String
        get()  = attributeStringString[this, "pattern"]
        set(newValue) {attributeStringString[this, "pattern"] = newValue}

    var placeholder : String
        get()  = attributeStringString[this, "placeholder"]
        set(newValue) {attributeStringString[this, "placeholder"] = newValue}

    var readonly : Boolean
        get()  = attributeBooleanTicker[this, "readonly"]
        set(newValue) {attributeBooleanTicker[this, "readonly"] = newValue}

    var required : Boolean
        get()  = attributeBooleanTicker[this, "required"]
        set(newValue) {attributeBooleanTicker[this, "required"] = newValue}

    var size : String
        get()  = attributeStringString[this, "size"]
        set(newValue) {attributeStringString[this, "size"] = newValue}

    var src : String
        get()  = attributeStringString[this, "src"]
        set(newValue) {attributeStringString[this, "src"] = newValue}

    var step : String
        get()  = attributeStringString[this, "step"]
        set(newValue) {attributeStringString[this, "step"] = newValue}

    var width : String
        get()  = attributeStringString[this, "width"]
        set(newValue) {attributeStringString[this, "width"] = newValue}

    var files : String
        get()  = attributeStringString[this, "files"]
        set(newValue) {attributeStringString[this, "files"] = newValue}

    var value : String
        get()  = attributeStringString[this, "value"]
        set(newValue) {attributeStringString[this, "value"] = newValue}

    var name : String
        get()  = attributeStringString[this, "name"]
        set(newValue) {attributeStringString[this, "name"] = newValue}


}
val INPUT.asFlowContent : FlowContent
    get()  = this

val INPUT.asInteractiveContent : InteractiveContent
    get()  = this

val INPUT.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
open class INS(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("ins", consumer, initialAttributes, null, false, false), HtmlBlockInlineTag {
    var cite : String
        get()  = attributeStringString[this, "cite"]
        set(newValue) {attributeStringString[this, "cite"] = newValue}

    var dateTime : String
        get()  = attributeStringString[this, "datetime"]
        set(newValue) {attributeStringString[this, "datetime"] = newValue}


}
val INS.asFlowContent : FlowContent
    get()  = this

val INS.asPhrasingContent : PhrasingContent
    get()  = this


