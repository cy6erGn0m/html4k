package kotlinx.html

import kotlin.contracts.ExperimentalContracts
import kotlin.contracts.InvocationKind
import kotlin.contracts.contract
import kotlinx.html.*
import kotlinx.html.impl.*
import kotlinx.html.attributes.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

@Suppress("unused")
open class VAR(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("var", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {

}
val VAR.asFlowContent : FlowContent
    get()  = this

val VAR.asPhrasingContent : PhrasingContent
    get()  = this


@Suppress("unused")
open class VIDEO(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("video", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {
    var src : String
        get()  = attributeStringString[this, "src"]
        set(newValue) {attributeStringString[this, "src"] = newValue}

    var autoBuffer : Boolean
        get()  = attributeBooleanTicker[this, "autobuffer"]
        set(newValue) {attributeBooleanTicker[this, "autobuffer"] = newValue}

    var autoPlay : Boolean
        get()  = attributeBooleanTicker[this, "autoplay"]
        set(newValue) {attributeBooleanTicker[this, "autoplay"] = newValue}

    var loop : Boolean
        get()  = attributeBooleanTicker[this, "loop"]
        set(newValue) {attributeBooleanTicker[this, "loop"] = newValue}

    var controls : Boolean
        get()  = attributeBooleanTicker[this, "controls"]
        set(newValue) {attributeBooleanTicker[this, "controls"] = newValue}

    var width : String
        get()  = attributeStringString[this, "width"]
        set(newValue) {attributeStringString[this, "width"] = newValue}

    var height : String
        get()  = attributeStringString[this, "height"]
        set(newValue) {attributeStringString[this, "height"] = newValue}

    var poster : String
        get()  = attributeStringString[this, "poster"]
        set(newValue) {attributeStringString[this, "poster"] = newValue}


}
/**
 * Media source for 
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun VIDEO.source(classes : String? = null, crossinline block : SOURCE.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    SOURCE(attributesMapOf("class", classes), consumer).visit(block)
}

val VIDEO.asFlowContent : FlowContent
    get()  = this

val VIDEO.asInteractiveContent : InteractiveContent
    get()  = this

val VIDEO.asPhrasingContent : PhrasingContent
    get()  = this


