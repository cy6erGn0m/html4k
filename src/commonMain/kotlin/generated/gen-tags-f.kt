package kotlinx.html

import kotlin.contracts.ExperimentalContracts
import kotlin.contracts.InvocationKind
import kotlin.contracts.contract
import kotlinx.html.*
import kotlinx.html.impl.*
import kotlinx.html.attributes.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

@Suppress("unused")
open class FIELDSET(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("fieldset", consumer, initialAttributes, null, false, false), HtmlBlockTag {
    var disabled : Boolean
        get()  = attributeBooleanTicker[this, "disabled"]
        set(newValue) {attributeBooleanTicker[this, "disabled"] = newValue}

    var form : String
        get()  = attributeStringString[this, "form"]
        set(newValue) {attributeStringString[this, "form"] = newValue}

    var name : String
        get()  = attributeStringString[this, "name"]
        set(newValue) {attributeStringString[this, "name"] = newValue}


}
/**
 * Fieldset legend
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun FIELDSET.legend(classes : String? = null, crossinline block : LEGEND.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    LEGEND(attributesMapOf("class", classes), consumer).visit(block)
}


@Suppress("unused")
open class FIGCAPTION(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("figcaption", consumer, initialAttributes, null, false, false), HtmlBlockTag {

}

@Suppress("unused")
open class FIGURE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("figure", consumer, initialAttributes, null, false, false), HtmlBlockTag {

}
/**
 * Fieldset legend
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun FIGURE.legend(classes : String? = null, crossinline block : LEGEND.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    LEGEND(attributesMapOf("class", classes), consumer).visit(block)
}

/**
 * Caption for 
 */
@HtmlTagMarker
@OptIn(ExperimentalContracts::class)
inline fun FIGURE.figcaption(classes : String? = null, crossinline block : FIGCAPTION.() -> Unit = {}) : Unit {
    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }
    FIGCAPTION(attributesMapOf("class", classes), consumer).visit(block)
}


@Suppress("unused")
open class FOOTER(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("footer", consumer, initialAttributes, null, false, false), HtmlBlockTag {

}

@Suppress("unused")
open class FORM(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag("form", consumer, initialAttributes, null, false, false), HtmlBlockTag {
    var acceptCharset : String
        get()  = attributeStringString[this, "accept-charset"]
        set(newValue) {attributeStringString[this, "accept-charset"] = newValue}

    var action : String
        get()  = attributeStringString[this, "action"]
        set(newValue) {attributeStringString[this, "action"] = newValue}

    var autoComplete : Boolean
        get()  = attributeBooleanBooleanOnOff[this, "autocomplete"]
        set(newValue) {attributeBooleanBooleanOnOff[this, "autocomplete"] = newValue}

    var encType : FormEncType
        get()  = attributeFormEncTypeEnumFormEncTypeValues[this, "enctype"]
        set(newValue) {attributeFormEncTypeEnumFormEncTypeValues[this, "enctype"] = newValue}

    var method : FormMethod
        get()  = attributeFormMethodEnumFormMethodValues[this, "method"]
        set(newValue) {attributeFormMethodEnumFormMethodValues[this, "method"] = newValue}

    var name : String
        get()  = attributeStringString[this, "name"]
        set(newValue) {attributeStringString[this, "name"] = newValue}

    var novalidate : Boolean
        get()  = attributeBooleanTicker[this, "novalidate"]
        set(newValue) {attributeBooleanTicker[this, "novalidate"] = newValue}

    var target : String
        get()  = attributeStringString[this, "target"]
        set(newValue) {attributeStringString[this, "target"] = newValue}


}

