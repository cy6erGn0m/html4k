package kotlinx.html

/*******************************************************************************
DO NOT EDIT
This file was generated by module generate
 *******************************************************************************/

@Suppress("unused")
open class VAR<E>(initialAttributes: Map<String, String>, override val consumer: TagConsumer<*, E>) :
  HTMLTag<E>("var", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag<E>

val <E> VAR<E>.asFlowContent: FlowContent<E>
  get() = this

val <E> VAR<E>.asPhrasingContent: PhrasingContent<E>
  get() = this


@Suppress("unused")
open class VIDEO<E>(initialAttributes: Map<String, String>, override val consumer: TagConsumer<*, E>) :
  HTMLTag<E>("video", consumer, initialAttributes, null, false, false),
  CommonAttributeGroupFacadeFlowInteractivePhrasingContent<E> {
  var src: String
    get() = attributeStringString.get(this, "src")
    set(newValue) {
      attributeStringString.set(this, "src", newValue)
    }
  
  var autoBuffer: Boolean
    get() = attributeBooleanTicker.get(this, "autobuffer")
    set(newValue) {
      attributeBooleanTicker.set(this, "autobuffer", newValue)
    }
  
  var autoPlay: Boolean
    get() = attributeBooleanTicker.get(this, "autoplay")
    set(newValue) {
      attributeBooleanTicker.set(this, "autoplay", newValue)
    }
  
  var loop: Boolean
    get() = attributeBooleanTicker.get(this, "loop")
    set(newValue) {
      attributeBooleanTicker.set(this, "loop", newValue)
    }
  
  var controls: Boolean
    get() = attributeBooleanTicker.get(this, "controls")
    set(newValue) {
      attributeBooleanTicker.set(this, "controls", newValue)
    }
  
  var width: String
    get() = attributeStringString.get(this, "width")
    set(newValue) {
      attributeStringString.set(this, "width", newValue)
    }
  
  var height: String
    get() = attributeStringString.get(this, "height")
    set(newValue) {
      attributeStringString.set(this, "height", newValue)
    }
  
  var poster: String
    get() = attributeStringString.get(this, "poster")
    set(newValue) {
      attributeStringString.set(this, "poster", newValue)
    }
  
  
}

/**
 * Media source for
 */
@HtmlTagMarker
inline fun <E> VIDEO<E>.source(classes: String? = null, crossinline block: SOURCE<E>.() -> Unit = {}): Unit =
  SOURCE(attributesMapOf("class", classes), consumer).visit(block)

val <E> VIDEO<E>.asFlowContent: FlowContent<E>
  get() = this

val <E> VIDEO<E>.asInteractiveContent: InteractiveContent<E>
  get() = this

val <E> VIDEO<E>.asPhrasingContent: PhrasingContent<E>
  get() = this


