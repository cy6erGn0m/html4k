package kotlinx.html

/*******************************************************************************
DO NOT EDIT
This file was generated by module generate
 *******************************************************************************/

@Suppress("unused")
open class DATALIST<E>(initialAttributes: Map<String, String>, override val consumer: TagConsumer<*, E>) :
    HTMLTag<E>("datalist", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag<E>

/**
 * Selectable choice
 */
@HtmlTagMarker
inline fun <E> DATALIST<E>.option(classes: String? = null, crossinline block: OPTION<E>.() -> Unit = {}): Unit =
    OPTION(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Selectable choice
 */
@HtmlTagMarker
fun <E> DATALIST<E>.option(classes: String? = null, content: String = ""): Unit =
    OPTION(attributesMapOf("class", classes), consumer).visit({ +content })

val <E> DATALIST<E>.asFlowContent: FlowContent<E>
    get() = this

val <E> DATALIST<E>.asPhrasingContent: PhrasingContent<E>
    get() = this


@Suppress("unused")
open class DD<E>(initialAttributes: Map<String, String>, override val consumer: TagConsumer<*, E>) :
    HTMLTag<E>("dd", consumer, initialAttributes, null, false, false), HtmlBlockTag<E>

@Suppress("unused")
open class DEL<E>(initialAttributes: Map<String, String>, override val consumer: TagConsumer<*, E>) :
    HTMLTag<E>("del", consumer, initialAttributes, null, false, false), HtmlBlockInlineTag<E> {
    var cite: String
        get() = attributeStringString.get(this, "cite")
        set(newValue) {
            attributeStringString.set(this, "cite", newValue)
        }

    var dateTime: String
        get() = attributeStringString.get(this, "datetime")
        set(newValue) {
            attributeStringString.set(this, "datetime", newValue)
        }


}

val <E> DEL<E>.asFlowContent: FlowContent<E>
    get() = this

val <E> DEL<E>.asPhrasingContent: PhrasingContent<E>
    get() = this


@Suppress("unused")
open class DETAILS<E>(initialAttributes: Map<String, String>, override val consumer: TagConsumer<*, E>) :
    HTMLTag<E>("details", consumer, initialAttributes, null, false, false),
    CommonAttributeGroupFacadeFlowInteractiveContent<E> {
    var open: Boolean
        get() = attributeBooleanTicker.get(this, "open")
        set(newValue) {
            attributeBooleanTicker.set(this, "open", newValue)
        }


}

/**
 * Fieldset legend
 */
@HtmlTagMarker
inline fun <E> DETAILS<E>.legend(classes: String? = null, crossinline block: LEGEND<E>.() -> Unit = {}): Unit =
    LEGEND(attributesMapOf("class", classes), consumer).visit(block)

val <E> DETAILS<E>.asFlowContent: FlowContent<E>
    get() = this

val <E> DETAILS<E>.asInteractiveContent: InteractiveContent<E>
    get() = this


@Suppress("unused")
open class DFN<E>(initialAttributes: Map<String, String>, override val consumer: TagConsumer<*, E>) :
    HTMLTag<E>("dfn", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag<E>

val <E> DFN<E>.asFlowContent: FlowContent<E>
    get() = this

val <E> DFN<E>.asPhrasingContent: PhrasingContent<E>
    get() = this


@Suppress("unused")
open class DIALOG<E>(initialAttributes: Map<String, String>, override val consumer: TagConsumer<*, E>) :
    HTMLTag<E>("dialog", consumer, initialAttributes, null, false, false), HtmlBlockTag<E>

@Suppress("unused")
open class DIV<E>(initialAttributes: Map<String, String>, override val consumer: TagConsumer<*, E>) :
    HTMLTag<E>("div", consumer, initialAttributes, null, false, false), HtmlBlockTag<E>

@Suppress("unused")
open class DL<E>(initialAttributes: Map<String, String>, override val consumer: TagConsumer<*, E>) :
    HTMLTag<E>("dl", consumer, initialAttributes, null, false, false), HtmlBlockTag<E>

/**
 * Definition description
 */
@HtmlTagMarker
inline fun <E> DL<E>.dd(classes: String? = null, crossinline block: DD<E>.() -> Unit = {}): Unit =
    DD(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Definition term
 */
@HtmlTagMarker
inline fun <E> DL<E>.dt(classes: String? = null, crossinline block: DT<E>.() -> Unit = {}): Unit =
    DT(attributesMapOf("class", classes), consumer).visit(block)


@Suppress("unused")
open class DT<E>(initialAttributes: Map<String, String>, override val consumer: TagConsumer<*, E>) :
    HTMLTag<E>("dt", consumer, initialAttributes, null, false, false), HtmlInlineTag<E>

