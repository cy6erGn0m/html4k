package kotlinx.html

import kotlinx.html.attributes.enumEncode

/*******************************************************************************
DO NOT EDIT
This file was generated by module generate
 *******************************************************************************/

interface FlowContent<E> : FlowOrMetaDataOrPhrasingContent<E>, FlowOrHeadingContent<E>, FlowOrMetaDataContent<E>,
  FlowOrInteractiveContent<E>, FlowOrPhrasingContent<E>, SectioningOrFlowContent<E>,
  FlowOrInteractiveOrPhrasingContent<E>, Tag<E>

interface HeadingContent<E> : FlowOrHeadingContent<E>, Tag<E>

interface InteractiveContent<E> : FlowOrInteractiveContent<E>, FlowOrInteractiveOrPhrasingContent<E>, Tag<E>

interface MetaDataContent<E> : FlowOrMetaDataOrPhrasingContent<E>, FlowOrMetaDataContent<E>, Tag<E>

interface PhrasingContent<E> : FlowOrMetaDataOrPhrasingContent<E>, FlowOrPhrasingContent<E>,
  FlowOrInteractiveOrPhrasingContent<E>, Tag<E>

interface SectioningContent<E> : SectioningOrFlowContent<E>, Tag<E>

/**
 * Information on author
 */
@HtmlTagMarker
inline fun <E> FlowContent<E>.address(classes: String? = null, crossinline block: ADDRESS<E>.() -> Unit = {}): Unit =
  ADDRESS(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Long quotation
 */
@HtmlTagMarker
inline fun <E> FlowContent<E>.blockQuote(
  classes: String? = null,
  crossinline block: BLOCKQUOTE<E>.() -> Unit = {}
): Unit = BLOCKQUOTE(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Dialog box or window
 */
@HtmlTagMarker
inline fun <E> FlowContent<E>.dialog(classes: String? = null, crossinline block: DIALOG<E>.() -> Unit = {}): Unit =
  DIALOG(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Generic language/style container
 */
@HtmlTagMarker
inline fun <E> FlowContent<E>.div(classes: String? = null, crossinline block: DIV<E>.() -> Unit = {}): Unit =
  DIV(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Definition list
 */
@HtmlTagMarker
inline fun <E> FlowContent<E>.dl(classes: String? = null, crossinline block: DL<E>.() -> Unit = {}): Unit =
  DL(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Form control group
 */
@HtmlTagMarker
inline fun <E> FlowContent<E>.fieldSet(classes: String? = null, crossinline block: FIELDSET<E>.() -> Unit = {}): Unit =
  FIELDSET(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Figure with optional caption
 */
@HtmlTagMarker
inline fun <E> FlowContent<E>.figure(classes: String? = null, crossinline block: FIGURE<E>.() -> Unit = {}): Unit =
  FIGURE(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Caption for
 */
@HtmlTagMarker
inline fun <E> FlowContent<E>.figcaption(
  classes: String? = null,
  crossinline block: FIGCAPTION<E>.() -> Unit = {}
): Unit = FIGCAPTION(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Footer for a page or section
 */
@HtmlTagMarker
inline fun <E> FlowContent<E>.footer(classes: String? = null, crossinline block: FOOTER<E>.() -> Unit = {}): Unit =
  FOOTER(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Interactive form
 */
@HtmlTagMarker
inline fun <E> FlowContent<E>.form(
  action: String? = null,
  encType: FormEncType? = null,
  method: FormMethod? = null,
  classes: String? = null,
  crossinline block: FORM<E>.() -> Unit = {}
): Unit = FORM(
  attributesMapOf(
    "action",
    action,
    "enctype",
    encType?.enumEncode(),
    "method",
    method?.enumEncode(),
    "class",
    classes
  ), consumer
).visit(block)

@HtmlTagMarker
inline fun <E> FlowContent<E>.getForm(
  action: String? = null,
  encType: FormEncType? = null,
  classes: String? = null,
  crossinline block: FORM<E>.() -> Unit = {}
): Unit = FORM(
  attributesMapOf(
    "action",
    action,
    "enctype",
    encType?.enumEncode(),
    "method",
    FormMethod.get.realValue,
    "class",
    classes
  ), consumer
).visit(block)

@HtmlTagMarker
inline fun <E> FlowContent<E>.postForm(
  action: String? = null,
  encType: FormEncType? = null,
  classes: String? = null,
  crossinline block: FORM<E>.() -> Unit = {}
): Unit = FORM(
  attributesMapOf(
    "action",
    action,
    "enctype",
    encType?.enumEncode(),
    "method",
    FormMethod.post.realValue,
    "class",
    classes
  ), consumer
).visit(block)

@Suppress("DEPRECATION")
@HtmlTagMarker
inline fun <E> FlowContent<E>.putForm(
  action: String? = null,
  encType: FormEncType? = null,
  classes: String? = null,
  crossinline block: FORM<E>.() -> Unit = {}
): Unit = FORM(
  attributesMapOf(
    "action",
    action,
    "enctype",
    encType?.enumEncode(),
    "method",
    FormMethod.put.realValue,
    "class",
    classes
  ), consumer
).visit(block)

@Suppress("DEPRECATION")
@HtmlTagMarker
inline fun <E> FlowContent<E>.deleteForm(
  action: String? = null,
  encType: FormEncType? = null,
  classes: String? = null,
  crossinline block: FORM<E>.() -> Unit = {}
): Unit = FORM(
  attributesMapOf(
    "action",
    action,
    "enctype",
    encType?.enumEncode(),
    "method",
    FormMethod.delete.realValue,
    "class",
    classes
  ), consumer
).visit(block)

@Suppress("DEPRECATION")
@HtmlTagMarker
inline fun <E> FlowContent<E>.patchForm(
  action: String? = null,
  encType: FormEncType? = null,
  classes: String? = null,
  crossinline block: FORM<E>.() -> Unit = {}
): Unit = FORM(
  attributesMapOf(
    "action",
    action,
    "enctype",
    encType?.enumEncode(),
    "method",
    FormMethod.patch.realValue,
    "class",
    classes
  ), consumer
).visit(block)

/**
 * Introductory or navigational aids for a page or section
 */
@HtmlTagMarker
inline fun <E> FlowContent<E>.header(classes: String? = null, crossinline block: HEADER<E>.() -> Unit = {}): Unit =
  HEADER(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Horizontal rule
 */
@HtmlTagMarker
inline fun <E> FlowContent<E>.hr(classes: String? = null, crossinline block: HR<E>.() -> Unit = {}): Unit =
  HR(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Ordered list
 */
@HtmlTagMarker
inline fun <E> FlowContent<E>.ol(classes: String? = null, crossinline block: OL<E>.() -> Unit = {}): Unit =
  OL(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Paragraph
 */
@HtmlTagMarker
inline fun <E> FlowContent<E>.p(classes: String? = null, crossinline block: P<E>.() -> Unit = {}): Unit =
  P(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Preformatted text
 */
@HtmlTagMarker
inline fun <E> FlowContent<E>.pre(classes: String? = null, crossinline block: PRE<E>.() -> Unit = {}): Unit =
  PRE(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Caption for
 */
@HtmlTagMarker
inline fun <E> FlowContent<E>.summary(classes: String? = null, crossinline block: SUMMARY<E>.() -> Unit = {}): Unit =
  SUMMARY(attributesMapOf("class", classes), consumer).visit(block)

/**
 *
 */
@HtmlTagMarker
inline fun <E> FlowContent<E>.table(classes: String? = null, crossinline block: TABLE<E>.() -> Unit = {}): Unit =
  TABLE(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Unordered list
 */
@HtmlTagMarker
inline fun <E> FlowContent<E>.ul(classes: String? = null, crossinline block: UL<E>.() -> Unit = {}): Unit =
  UL(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Document base URI
 */
@HtmlTagMarker
inline fun <E> MetaDataContent<E>.base(classes: String? = null, crossinline block: BASE<E>.() -> Unit = {}): Unit =
  BASE(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Document title
 */
@HtmlTagMarker
inline fun <E> MetaDataContent<E>.title(crossinline block: TITLE<E>.() -> Unit = {}): Unit =
  TITLE(emptyMap, consumer).visit(block)

/**
 * Document title
 */
@HtmlTagMarker
fun <E> MetaDataContent<E>.title(content: String = ""): Unit = TITLE(emptyMap, consumer).visit({ +content })

