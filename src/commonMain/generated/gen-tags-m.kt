package kotlinx.html

import kotlinx.html.attributes.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

@Suppress("unused")
open class MAIN<E>(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*, E>) : HTMLTag<E>("main", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowPhrasingSectioningContent<E> {

}

@Suppress("unused")
open class MAP<E>(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*, E>) : HTMLTag<E>("map", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag<E> {
    var name : String
        get()  = attributeStringString.get(this, "name")
        set(newValue) {attributeStringString.set(this, "name", newValue)}


}
val <E> MAP<E>.asFlowContent : FlowContent<E>
    get()  = this

val <E> MAP<E>.asPhrasingContent : PhrasingContent<E>
    get()  = this


@Suppress("unused")
open class MARK<E>(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*, E>) : HTMLTag<E>("mark", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag<E> {

}
val <E> MARK<E>.asFlowContent : FlowContent<E>
    get()  = this

val <E> MARK<E>.asPhrasingContent : PhrasingContent<E>
    get()  = this


@Suppress("unused")
open class MATH<E>(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*, E>) : HTMLTag<E>("math", consumer, initialAttributes, null, false, false), HtmlBlockInlineTag<E> {

}
val <E> MATH<E>.asFlowContent : FlowContent<E>
    get()  = this

val <E> MATH<E>.asPhrasingContent : PhrasingContent<E>
    get()  = this


@Suppress("unused")
open class MATHML<E>(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*, E>) : HTMLTag<E>("mathml", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade<E> {

}

@Suppress("unused")
open class META<E>(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*, E>) : HTMLTag<E>("meta", consumer, initialAttributes, null, false, true), CommonAttributeGroupFacadeFlowMetaDataPhrasingContent<E> {
    var httpEquiv : String
        get()  = attributeStringString.get(this, "http-equiv")
        set(newValue) {attributeStringString.set(this, "http-equiv", newValue)}

    var name : String
        get()  = attributeStringString.get(this, "name")
        set(newValue) {attributeStringString.set(this, "name", newValue)}

    var content : String
        get()  = attributeStringString.get(this, "content")
        set(newValue) {attributeStringString.set(this, "content", newValue)}

    var charset : String
        get()  = attributeStringString.get(this, "charset")
        set(newValue) {attributeStringString.set(this, "charset", newValue)}


}
val <E> META<E>.asFlowContent : FlowContent<E>
    get()  = this

val <E> META<E>.asMetaDataContent : MetaDataContent<E>
    get()  = this

val <E> META<E>.asPhrasingContent : PhrasingContent<E>
    get()  = this


@Suppress("unused")
open class METER<E>(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*, E>) : HTMLTag<E>("meter", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag<E> {
    var value : String
        get()  = attributeStringString.get(this, "value")
        set(newValue) {attributeStringString.set(this, "value", newValue)}

    var min : String
        get()  = attributeStringString.get(this, "min")
        set(newValue) {attributeStringString.set(this, "min", newValue)}

    var max : String
        get()  = attributeStringString.get(this, "max")
        set(newValue) {attributeStringString.set(this, "max", newValue)}

    var low : String
        get()  = attributeStringString.get(this, "low")
        set(newValue) {attributeStringString.set(this, "low", newValue)}

    var high : String
        get()  = attributeStringString.get(this, "high")
        set(newValue) {attributeStringString.set(this, "high", newValue)}

    var optimum : String
        get()  = attributeStringString.get(this, "optimum")
        set(newValue) {attributeStringString.set(this, "optimum", newValue)}


}
val <E> METER<E>.asFlowContent : FlowContent<E>
    get()  = this

val <E> METER<E>.asPhrasingContent : PhrasingContent<E>
    get()  = this


