package kotlinx.html

/*******************************************************************************
DO NOT EDIT
This file was generated by module generate
 *******************************************************************************/

@Suppress("unused")
open class A<E>(initialAttributes: Map<String, String>, override val consumer: TagConsumer<*, E>) :
  HTMLTag<E>("a", consumer, initialAttributes, null, true, false),
  CommonAttributeGroupFacadeFlowInteractivePhrasingContent<E> {
  var href: String
    get() = attributeStringString.get(this, "href")
    set(newValue) {
      attributeStringString.set(this, "href", newValue)
    }
  
  var target: String
    get() = attributeStringString.get(this, "target")
    set(newValue) {
      attributeStringString.set(this, "target", newValue)
    }
  
  var ping: String
    get() = attributeStringString.get(this, "ping")
    set(newValue) {
      attributeStringString.set(this, "ping", newValue)
    }
  
  var rel: String
    get() = attributeStringString.get(this, "rel")
    set(newValue) {
      attributeStringString.set(this, "rel", newValue)
    }
  
  var hrefLang: String
    get() = attributeStringString.get(this, "hreflang")
    set(newValue) {
      attributeStringString.set(this, "hreflang", newValue)
    }
  
  var type: String
    get() = attributeStringString.get(this, "type")
    set(newValue) {
      attributeStringString.set(this, "type", newValue)
    }
  
  
}

val <E> A<E>.asFlowContent: FlowContent<E>
  get() = this

val <E> A<E>.asInteractiveContent: InteractiveContent<E>
  get() = this

val <E> A<E>.asPhrasingContent: PhrasingContent<E>
  get() = this


@Suppress("unused")
open class ABBR<E>(initialAttributes: Map<String, String>, override val consumer: TagConsumer<*, E>) :
  HTMLTag<E>("abbr", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag<E>

val <E> ABBR<E>.asFlowContent: FlowContent<E>
  get() = this

val <E> ABBR<E>.asPhrasingContent: PhrasingContent<E>
  get() = this


@Suppress("unused")
open class ADDRESS<E>(initialAttributes: Map<String, String>, override val consumer: TagConsumer<*, E>) :
  HTMLTag<E>("address", consumer, initialAttributes, null, false, false), HtmlBlockTag<E>

@Suppress("unused")
open class AREA<E>(initialAttributes: Map<String, String>, override val consumer: TagConsumer<*, E>) :
  HTMLTag<E>("area", consumer, initialAttributes, null, true, true), HtmlBlockInlineTag<E> {
  var coords: String
    get() = attributeStringString.get(this, "coords")
    set(newValue) {
      attributeStringString.set(this, "coords", newValue)
    }
  
  var href: String
    get() = attributeStringString.get(this, "href")
    set(newValue) {
      attributeStringString.set(this, "href", newValue)
    }
  
  var hrefLang: String
    get() = attributeStringString.get(this, "hreflang")
    set(newValue) {
      attributeStringString.set(this, "hreflang", newValue)
    }
  
  var alt: String
    get() = attributeStringString.get(this, "alt")
    set(newValue) {
      attributeStringString.set(this, "alt", newValue)
    }
  
  var target: String
    get() = attributeStringString.get(this, "target")
    set(newValue) {
      attributeStringString.set(this, "target", newValue)
    }
  
  var media: String
    get() = attributeStringString.get(this, "media")
    set(newValue) {
      attributeStringString.set(this, "media", newValue)
    }
  
  var rel: String
    get() = attributeStringString.get(this, "rel")
    set(newValue) {
      attributeStringString.set(this, "rel", newValue)
    }
  
  var ping: String
    get() = attributeStringString.get(this, "ping")
    set(newValue) {
      attributeStringString.set(this, "ping", newValue)
    }
  
  var type: String
    get() = attributeStringString.get(this, "type")
    set(newValue) {
      attributeStringString.set(this, "type", newValue)
    }
  
  
}

val <E> AREA<E>.asFlowContent: FlowContent<E>
  get() = this

val <E> AREA<E>.asPhrasingContent: PhrasingContent<E>
  get() = this


@Suppress("unused")
open class ARTICLE<E>(initialAttributes: Map<String, String>, override val consumer: TagConsumer<*, E>) :
  HTMLTag<E>("article", consumer, initialAttributes, null, false, false),
  CommonAttributeGroupFacadeFlowSectioningContent<E>

val <E> ARTICLE<E>.asFlowContent: FlowContent<E>
  get() = this

val <E> ARTICLE<E>.asSectioningContent: SectioningContent<E>
  get() = this


@Suppress("unused")
open class ASIDE<E>(initialAttributes: Map<String, String>, override val consumer: TagConsumer<*, E>) :
  HTMLTag<E>("aside", consumer, initialAttributes, null, false, false),
  CommonAttributeGroupFacadeFlowSectioningContent<E>

val <E> ASIDE<E>.asFlowContent: FlowContent<E>
  get() = this

val <E> ASIDE<E>.asSectioningContent: SectioningContent<E>
  get() = this


@Suppress("unused")
open class AUDIO<E>(initialAttributes: Map<String, String>, override val consumer: TagConsumer<*, E>) :
  HTMLTag<E>("audio", consumer, initialAttributes, null, false, false),
  CommonAttributeGroupFacadeFlowInteractivePhrasingContent<E> {
  var src: String
    get() = attributeStringString.get(this, "src")
    set(newValue) {
      attributeStringString.set(this, "src", newValue)
    }
  
  var autoBuffer: Boolean
    get() = attributeBooleanTicker.get(this, "autobuffer")
    set(newValue) {
      attributeBooleanTicker.set(this, "autobuffer", newValue)
    }
  
  var autoPlay: Boolean
    get() = attributeBooleanTicker.get(this, "autoplay")
    set(newValue) {
      attributeBooleanTicker.set(this, "autoplay", newValue)
    }
  
  var loop: Boolean
    get() = attributeBooleanTicker.get(this, "loop")
    set(newValue) {
      attributeBooleanTicker.set(this, "loop", newValue)
    }
  
  var controls: Boolean
    get() = attributeBooleanTicker.get(this, "controls")
    set(newValue) {
      attributeBooleanTicker.set(this, "controls", newValue)
    }
  
  
}

/**
 * Media source for
 */
@HtmlTagMarker
inline fun <E> AUDIO<E>.source(classes: String? = null, crossinline block: SOURCE<E>.() -> Unit = {}): Unit =
  SOURCE(attributesMapOf("class", classes), consumer).visit(block)

val <E> AUDIO<E>.asFlowContent: FlowContent<E>
  get() = this

val <E> AUDIO<E>.asInteractiveContent: InteractiveContent<E>
  get() = this

val <E> AUDIO<E>.asPhrasingContent: PhrasingContent<E>
  get() = this


