package kotlinx.html

import kotlinx.html.attributes.*

/*******************************************************************************
    DO NOT EDIT
    This file was generated by module generate
*******************************************************************************/

interface FlowOrMetaDataOrPhrasingContent<E> : Tag<E> {
}

interface FlowOrHeadingContent<E> : Tag<E> {
}

interface FlowOrMetaDataContent<E> : FlowOrMetaDataOrPhrasingContent<E>, Tag<E> {
}

interface FlowOrInteractiveContent<E> : FlowOrInteractiveOrPhrasingContent<E>, Tag<E> {
}

interface FlowOrPhrasingContent<E> : FlowOrInteractiveOrPhrasingContent<E>, FlowOrMetaDataOrPhrasingContent<E>, Tag<E> {
}

interface SectioningOrFlowContent<E> : Tag<E> {
}

interface FlowOrInteractiveOrPhrasingContent<E> : Tag<E> {
}



@HtmlTagMarker
inline fun <E> FlowOrMetaDataOrPhrasingContent<E>.command(type : CommandType? = null, classes : String? = null, crossinline block : COMMAND<E>.() -> Unit = {}) : Unit = COMMAND(attributesMapOf("type", type?.enumEncode(),"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrMetaDataOrPhrasingContent<E>.commandCommand(classes : String? = null, crossinline block : COMMAND<E>.() -> Unit = {}) : Unit = COMMAND(attributesMapOf("type", CommandType.command.realValue,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrMetaDataOrPhrasingContent<E>.checkBoxCommand(classes : String? = null, crossinline block : COMMAND<E>.() -> Unit = {}) : Unit = COMMAND(attributesMapOf("type", CommandType.checkBox.realValue,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrMetaDataOrPhrasingContent<E>.radioCommand(classes : String? = null, crossinline block : COMMAND<E>.() -> Unit = {}) : Unit = COMMAND(attributesMapOf("type", CommandType.radio.realValue,"class", classes), consumer).visit(block)

/**
 * A media-independent link
 */
@HtmlTagMarker
inline fun <E> FlowOrMetaDataOrPhrasingContent<E>.link(href : String? = null, rel : String? = null, type : String? = null, crossinline block : LINK<E>.() -> Unit = {}) : Unit = LINK(attributesMapOf("href", href,"rel", rel,"type", type), consumer).visit(block)

/**
 * Generic metainformation
 */
@HtmlTagMarker
inline fun <E> FlowOrMetaDataOrPhrasingContent<E>.meta(name : String? = null, content : String? = null, charset : String? = null, crossinline block : META<E>.() -> Unit = {}) : Unit = META(attributesMapOf("name", name,"content", content,"charset", charset), consumer).visit(block)

/**
 * Generic metainformation
 */
@HtmlTagMarker
inline fun <E> FlowOrMetaDataOrPhrasingContent<E>.noScript(classes : String? = null, crossinline block : NOSCRIPT<E>.() -> Unit = {}) : Unit = NOSCRIPT(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Script statements
 */
@HtmlTagMarker
inline fun <E> FlowOrMetaDataOrPhrasingContent<E>.script(type : String? = null, src : String? = null, crossinline block : SCRIPT<E>.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf("type", type,"src", src), consumer).visit(block)
@Deprecated("This tag doesn't support content or requires unsafe (try unsafe {})")
@Suppress("DEPRECATION")
/**
 * Script statements
 */
@HtmlTagMarker
fun <E> FlowOrMetaDataOrPhrasingContent<E>.script(type : String? = null, src : String? = null, content : String = "") : Unit = SCRIPT(attributesMapOf("type", type,"src", src), consumer).visit({+content})


/**
 * Heading
 */
@HtmlTagMarker
inline fun <E> FlowOrHeadingContent<E>.h1(classes : String? = null, crossinline block : H1<E>.() -> Unit = {}) : Unit = H1(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Heading
 */
@HtmlTagMarker
inline fun <E> FlowOrHeadingContent<E>.h2(classes : String? = null, crossinline block : H2<E>.() -> Unit = {}) : Unit = H2(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Heading
 */
@HtmlTagMarker
inline fun <E> FlowOrHeadingContent<E>.h3(classes : String? = null, crossinline block : H3<E>.() -> Unit = {}) : Unit = H3(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Heading
 */
@HtmlTagMarker
inline fun <E> FlowOrHeadingContent<E>.h4(classes : String? = null, crossinline block : H4<E>.() -> Unit = {}) : Unit = H4(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Heading
 */
@HtmlTagMarker
inline fun <E> FlowOrHeadingContent<E>.h5(classes : String? = null, crossinline block : H5<E>.() -> Unit = {}) : Unit = H5(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Heading
 */
@HtmlTagMarker
inline fun <E> FlowOrHeadingContent<E>.h6(classes : String? = null, crossinline block : H6<E>.() -> Unit = {}) : Unit = H6(attributesMapOf("class", classes), consumer).visit(block)

@HtmlTagMarker
inline fun <E> FlowOrHeadingContent<E>.hGroup(classes : String? = null, crossinline block : HGROUP<E>.() -> Unit = {}) : Unit = HGROUP(attributesMapOf("class", classes), consumer).visit(block)


/**
 * Style info
 */
@HtmlTagMarker
inline fun <E> FlowOrMetaDataContent<E>.style(type : String? = null, crossinline block : STYLE<E>.() -> Unit = {}) : Unit = STYLE(attributesMapOf("type", type), consumer).visit(block)
@Deprecated("This tag doesn't support content or requires unsafe (try unsafe {})")
@Suppress("DEPRECATION")
/**
 * Style info
 */
@HtmlTagMarker
fun <E> FlowOrMetaDataContent<E>.style(type : String? = null, content : String = "") : Unit = STYLE(attributesMapOf("type", type), consumer).visit({+content})


/**
 * Disclosure control for hiding details
 */
@HtmlTagMarker
inline fun <E> FlowOrInteractiveContent<E>.details(classes : String? = null, crossinline block : DETAILS<E>.() -> Unit = {}) : Unit = DETAILS(attributesMapOf("class", classes), consumer).visit(block)


/**
 * Abbreviated form (e.g., WWW, HTTP,etc.)
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.abbr(classes : String? = null, crossinline block : ABBR<E>.() -> Unit = {}) : Unit = ABBR(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Client-side image map area
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.area(shape : AreaShape? = null, alt : String? = null, classes : String? = null, crossinline block : AREA<E>.() -> Unit = {}) : Unit = AREA(attributesMapOf("Shape", shape?.enumEncode(),"alt", alt,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.rectArea(alt : String? = null, classes : String? = null, crossinline block : AREA<E>.() -> Unit = {}) : Unit = AREA(attributesMapOf("Shape", AreaShape.rect.realValue,"alt", alt,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.circleArea(alt : String? = null, classes : String? = null, crossinline block : AREA<E>.() -> Unit = {}) : Unit = AREA(attributesMapOf("Shape", AreaShape.circle.realValue,"alt", alt,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.polyArea(alt : String? = null, classes : String? = null, crossinline block : AREA<E>.() -> Unit = {}) : Unit = AREA(attributesMapOf("Shape", AreaShape.poly.realValue,"alt", alt,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.defaultArea(alt : String? = null, classes : String? = null, crossinline block : AREA<E>.() -> Unit = {}) : Unit = AREA(attributesMapOf("Shape", AreaShape.default.realValue,"alt", alt,"class", classes), consumer).visit(block)

/**
 * Bold text style
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.b(classes : String? = null, crossinline block : B<E>.() -> Unit = {}) : Unit = B(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Text directionality isolation
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.bdi(classes : String? = null, crossinline block : BDI<E>.() -> Unit = {}) : Unit = BDI(attributesMapOf("class", classes), consumer).visit(block)

/**
 * I18N BiDi over-ride
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.bdo(classes : String? = null, crossinline block : BDO<E>.() -> Unit = {}) : Unit = BDO(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Forced line break
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.br(classes : String? = null, crossinline block : BR<E>.() -> Unit = {}) : Unit = BR(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Scriptable bitmap canvas
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.canvas(classes : String? = null, crossinline block : CANVAS<E>.() -> Unit = {}) : Unit = CANVAS(attributesMapOf("class", classes), consumer).visit(block)
/**
 * Scriptable bitmap canvas
 */
@HtmlTagMarker
fun <E> FlowOrPhrasingContent<E>.canvas(classes : String? = null, content : String = "") : Unit = CANVAS(attributesMapOf("class", classes), consumer).visit({+content})

/**
 * Citation
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.cite(classes : String? = null, crossinline block : CITE<E>.() -> Unit = {}) : Unit = CITE(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Computer code fragment
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.code(classes : String? = null, crossinline block : CODE<E>.() -> Unit = {}) : Unit = CODE(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Container for options for 
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.dataList(classes : String? = null, crossinline block : DATALIST<E>.() -> Unit = {}) : Unit = DATALIST(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Deleted text
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.del(classes : String? = null, crossinline block : DEL<E>.() -> Unit = {}) : Unit = DEL(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Instance definition
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.dfn(classes : String? = null, crossinline block : DFN<E>.() -> Unit = {}) : Unit = DFN(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Emphasis
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.em(classes : String? = null, crossinline block : EM<E>.() -> Unit = {}) : Unit = EM(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Italic text style
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.i(classes : String? = null, crossinline block : I<E>.() -> Unit = {}) : Unit = I(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Inserted text
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.ins(classes : String? = null, crossinline block : INS<E>.() -> Unit = {}) : Unit = INS(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Text to be entered by the user
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.kbd(classes : String? = null, crossinline block : KBD<E>.() -> Unit = {}) : Unit = KBD(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Client-side image map
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.map(name : String? = null, classes : String? = null, crossinline block : MAP<E>.() -> Unit = {}) : Unit = MAP(attributesMapOf("name", name,"class", classes), consumer).visit(block)

/**
 * Highlight
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.mark(classes : String? = null, crossinline block : MARK<E>.() -> Unit = {}) : Unit = MARK(attributesMapOf("class", classes), consumer).visit(block)

@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.math(classes : String? = null, crossinline block : MATH<E>.() -> Unit = {}) : Unit = MATH(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Gauge
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.meter(classes : String? = null, crossinline block : METER<E>.() -> Unit = {}) : Unit = METER(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Calculated output value
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.output(classes : String? = null, crossinline block : OUTPUT<E>.() -> Unit = {}) : Unit = OUTPUT(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Progress bar
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.progress(classes : String? = null, crossinline block : PROGRESS<E>.() -> Unit = {}) : Unit = PROGRESS(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Short inline quotation
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.q(classes : String? = null, crossinline block : Q<E>.() -> Unit = {}) : Unit = Q(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Ruby annotation(s)
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.ruby(classes : String? = null, crossinline block : RUBY<E>.() -> Unit = {}) : Unit = RUBY(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Strike-through text style
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.samp(classes : String? = null, crossinline block : SAMP<E>.() -> Unit = {}) : Unit = SAMP(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Small text style
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.small(classes : String? = null, crossinline block : SMALL<E>.() -> Unit = {}) : Unit = SMALL(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Generic language/style container
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.span(classes : String? = null, crossinline block : SPAN<E>.() -> Unit = {}) : Unit = SPAN(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Strong emphasis
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.strong(classes : String? = null, crossinline block : STRONG<E>.() -> Unit = {}) : Unit = STRONG(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Subscript
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.sub(classes : String? = null, crossinline block : SUB<E>.() -> Unit = {}) : Unit = SUB(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Superscript
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.sup(classes : String? = null, crossinline block : SUP<E>.() -> Unit = {}) : Unit = SUP(attributesMapOf("class", classes), consumer).visit(block)

@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.svg(classes : String? = null, crossinline block : SVG<E>.() -> Unit = {}) : Unit = SVG(attributesMapOf("class", classes), consumer).visit(block)
@HtmlTagMarker
fun <E> FlowOrPhrasingContent<E>.svg(classes : String? = null, content : String = "") : Unit = SVG(attributesMapOf("class", classes), consumer).visit({+content})

/**
 * Machine-readable equivalent of date- or time-related data
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.time(classes : String? = null, crossinline block : TIME<E>.() -> Unit = {}) : Unit = TIME(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Unordered list
 */
@HtmlTagMarker
inline fun <E> FlowOrPhrasingContent<E>.htmlVar(classes : String? = null, crossinline block : VAR<E>.() -> Unit = {}) : Unit = VAR(attributesMapOf("class", classes), consumer).visit(block)


/**
 * Self-contained syndicatable or reusable composition
 */
@HtmlTagMarker
inline fun <E> SectioningOrFlowContent<E>.article(classes : String? = null, crossinline block : ARTICLE<E>.() -> Unit = {}) : Unit = ARTICLE(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Sidebar for tangentially related content
 */
@HtmlTagMarker
inline fun <E> SectioningOrFlowContent<E>.aside(classes : String? = null, crossinline block : ASIDE<E>.() -> Unit = {}) : Unit = ASIDE(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Container for the dominant contents of another element
 */
@HtmlTagMarker
inline fun <E> SectioningOrFlowContent<E>.main(classes : String? = null, crossinline block : MAIN<E>.() -> Unit = {}) : Unit = MAIN(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Section with navigational links
 */
@HtmlTagMarker
inline fun <E> SectioningOrFlowContent<E>.nav(classes : String? = null, crossinline block : NAV<E>.() -> Unit = {}) : Unit = NAV(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Generic document or application section
 */
@HtmlTagMarker
inline fun <E> SectioningOrFlowContent<E>.section(classes : String? = null, crossinline block : SECTION<E>.() -> Unit = {}) : Unit = SECTION(attributesMapOf("class", classes), consumer).visit(block)


/**
 * Anchor
 */
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.a(href : String? = null, target : String? = null, classes : String? = null, crossinline block : A<E>.() -> Unit = {}) : Unit = A(attributesMapOf("href", href,"target", target,"class", classes), consumer).visit(block)

/**
 * Audio player
 */
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.audio(classes : String? = null, crossinline block : AUDIO<E>.() -> Unit = {}) : Unit = AUDIO(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Push button
 */
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.button(formEncType : ButtonFormEncType? = null, formMethod : ButtonFormMethod? = null, name : String? = null, type : ButtonType? = null, classes : String? = null, crossinline block : BUTTON<E>.() -> Unit = {}) : Unit = BUTTON(attributesMapOf("formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"type", type?.enumEncode(),"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.getButton(formEncType : ButtonFormEncType? = null, name : String? = null, type : ButtonType? = null, classes : String? = null, crossinline block : BUTTON<E>.() -> Unit = {}) : Unit = BUTTON(attributesMapOf("formenctype", formEncType?.enumEncode(),"formmethod", ButtonFormMethod.get.realValue,"name", name,"type", type?.enumEncode(),"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.postButton(formEncType : ButtonFormEncType? = null, name : String? = null, type : ButtonType? = null, classes : String? = null, crossinline block : BUTTON<E>.() -> Unit = {}) : Unit = BUTTON(attributesMapOf("formenctype", formEncType?.enumEncode(),"formmethod", ButtonFormMethod.post.realValue,"name", name,"type", type?.enumEncode(),"class", classes), consumer).visit(block)
@Suppress("DEPRECATION")
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.putButton(formEncType : ButtonFormEncType? = null, name : String? = null, type : ButtonType? = null, classes : String? = null, crossinline block : BUTTON<E>.() -> Unit = {}) : Unit = BUTTON(attributesMapOf("formenctype", formEncType?.enumEncode(),"formmethod", ButtonFormMethod.put.realValue,"name", name,"type", type?.enumEncode(),"class", classes), consumer).visit(block)
@Suppress("DEPRECATION")
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.deleteButton(formEncType : ButtonFormEncType? = null, name : String? = null, type : ButtonType? = null, classes : String? = null, crossinline block : BUTTON<E>.() -> Unit = {}) : Unit = BUTTON(attributesMapOf("formenctype", formEncType?.enumEncode(),"formmethod", ButtonFormMethod.delete.realValue,"name", name,"type", type?.enumEncode(),"class", classes), consumer).visit(block)
@Suppress("DEPRECATION")
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.patchButton(formEncType : ButtonFormEncType? = null, name : String? = null, type : ButtonType? = null, classes : String? = null, crossinline block : BUTTON<E>.() -> Unit = {}) : Unit = BUTTON(attributesMapOf("formenctype", formEncType?.enumEncode(),"formmethod", ButtonFormMethod.patch.realValue,"name", name,"type", type?.enumEncode(),"class", classes), consumer).visit(block)

/**
 * Plugin
 */
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.embed(classes : String? = null, crossinline block : EMBED<E>.() -> Unit = {}) : Unit = EMBED(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Inline subwindow
 */
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.iframe(sandbox : IframeSandbox? = null, classes : String? = null, crossinline block : IFRAME<E>.() -> Unit = {}) : Unit = IFRAME(attributesMapOf("sandbox", sandbox?.enumEncode(),"class", classes), consumer).visit(block)
/**
 * Inline subwindow
 */
@HtmlTagMarker
fun <E> FlowOrInteractiveOrPhrasingContent<E>.iframe(sandbox : IframeSandbox? = null, classes : String? = null, content : String = "") : Unit = IFRAME(attributesMapOf("sandbox", sandbox?.enumEncode(),"class", classes), consumer).visit({+content})
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.allowSameOriginIframe(classes : String? = null, crossinline block : IFRAME<E>.() -> Unit = {}) : Unit = IFRAME(attributesMapOf("sandbox", IframeSandbox.allowSameOrigin.realValue,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.allowFormSIframe(classes : String? = null, crossinline block : IFRAME<E>.() -> Unit = {}) : Unit = IFRAME(attributesMapOf("sandbox", IframeSandbox.allowFormS.realValue,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.allowScriptsIframe(classes : String? = null, crossinline block : IFRAME<E>.() -> Unit = {}) : Unit = IFRAME(attributesMapOf("sandbox", IframeSandbox.allowScripts.realValue,"class", classes), consumer).visit(block)
@HtmlTagMarker
fun <E> FlowOrInteractiveOrPhrasingContent<E>.allowSameOriginIframe(classes : String? = null, content : String = "") : Unit = IFRAME(attributesMapOf("sandbox", IframeSandbox.allowSameOrigin.realValue,"class", classes), consumer).visit({+content})
@HtmlTagMarker
fun <E> FlowOrInteractiveOrPhrasingContent<E>.allowFormSIframe(classes : String? = null, content : String = "") : Unit = IFRAME(attributesMapOf("sandbox", IframeSandbox.allowFormS.realValue,"class", classes), consumer).visit({+content})
@HtmlTagMarker
fun <E> FlowOrInteractiveOrPhrasingContent<E>.allowScriptsIframe(classes : String? = null, content : String = "") : Unit = IFRAME(attributesMapOf("sandbox", IframeSandbox.allowScripts.realValue,"class", classes), consumer).visit({+content})

/**
 * Embedded image
 */
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.img(alt : String? = null, src : String? = null, classes : String? = null, crossinline block : IMG<E>.() -> Unit = {}) : Unit = IMG(attributesMapOf("alt", alt,"src", src,"class", classes), consumer).visit(block)

/**
 * Form control
 */
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.input(type : InputType? = null, formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT<E>.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", type?.enumEncode(),"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.buttonInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT<E>.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.button.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.checkBoxInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT<E>.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.checkBox.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.colorInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT<E>.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.color.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.dateInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT<E>.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.date.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.dateTimeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT<E>.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.dateTime.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.dateTimeLocalInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT<E>.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.dateTimeLocal.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.emailInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT<E>.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.email.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.fileInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT<E>.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.file.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.hiddenInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT<E>.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.hidden.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.imageInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT<E>.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.image.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.monthInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT<E>.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.month.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.numberInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT<E>.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.number.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.passwordInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT<E>.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.password.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.radioInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT<E>.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.radio.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.rangeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT<E>.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.range.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.resetInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT<E>.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.reset.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.searchInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT<E>.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.search.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.submitInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT<E>.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.submit.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.textInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT<E>.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.text.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.telInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT<E>.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.tel.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.timeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT<E>.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.time.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.urlInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT<E>.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.url.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.weekInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT<E>.() -> Unit = {}) : Unit = INPUT(attributesMapOf("type", InputType.week.realValue,"formenctype", formEncType?.enumEncode(),"formmethod", formMethod?.enumEncode(),"name", name,"class", classes), consumer).visit(block)

/**
 * Cryptographic key-pair generator form control
 */
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.keyGen(keyType : KeyGenKeyType? = null, classes : String? = null, crossinline block : KEYGEN<E>.() -> Unit = {}) : Unit = KEYGEN(attributesMapOf("keytype", keyType?.enumEncode(),"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.rsaKeyGen(classes : String? = null, crossinline block : KEYGEN<E>.() -> Unit = {}) : Unit = KEYGEN(attributesMapOf("keytype", KeyGenKeyType.rsa.realValue,"class", classes), consumer).visit(block)

/**
 * Form field label text
 */
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.label(classes : String? = null, crossinline block : LABEL<E>.() -> Unit = {}) : Unit = LABEL(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Generic embedded object
 */
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.htmlObject(classes : String? = null, crossinline block : OBJECT<E>.() -> Unit = {}) : Unit = OBJECT(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Option selector
 */
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.select(classes : String? = null, crossinline block : SELECT<E>.() -> Unit = {}) : Unit = SELECT(attributesMapOf("class", classes), consumer).visit(block)

/**
 * Multi-line text field
 */
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, crossinline block : TEXTAREA<E>.() -> Unit = {}) : Unit = TEXTAREA(attributesMapOf("rows", rows,"cols", cols,"wrap", wrap?.enumEncode(),"class", classes), consumer).visit(block)
/**
 * Multi-line text field
 */
@HtmlTagMarker
fun <E> FlowOrInteractiveOrPhrasingContent<E>.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, content : String = "") : Unit = TEXTAREA(attributesMapOf("rows", rows,"cols", cols,"wrap", wrap?.enumEncode(),"class", classes), consumer).visit({+content})
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.hardTextArea(rows : String? = null, cols : String? = null, classes : String? = null, crossinline block : TEXTAREA<E>.() -> Unit = {}) : Unit = TEXTAREA(attributesMapOf("rows", rows,"cols", cols,"wrap", TextAreaWrap.hard.realValue,"class", classes), consumer).visit(block)
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.softTextArea(rows : String? = null, cols : String? = null, classes : String? = null, crossinline block : TEXTAREA<E>.() -> Unit = {}) : Unit = TEXTAREA(attributesMapOf("rows", rows,"cols", cols,"wrap", TextAreaWrap.soft.realValue,"class", classes), consumer).visit(block)
@HtmlTagMarker
fun <E> FlowOrInteractiveOrPhrasingContent<E>.hardTextArea(rows : String? = null, cols : String? = null, classes : String? = null, content : String = "") : Unit = TEXTAREA(attributesMapOf("rows", rows,"cols", cols,"wrap", TextAreaWrap.hard.realValue,"class", classes), consumer).visit({+content})
@HtmlTagMarker
fun <E> FlowOrInteractiveOrPhrasingContent<E>.softTextArea(rows : String? = null, cols : String? = null, classes : String? = null, content : String = "") : Unit = TEXTAREA(attributesMapOf("rows", rows,"cols", cols,"wrap", TextAreaWrap.soft.realValue,"class", classes), consumer).visit({+content})

/**
 * Video player
 */
@HtmlTagMarker
inline fun <E> FlowOrInteractiveOrPhrasingContent<E>.video(classes : String? = null, crossinline block : VIDEO<E>.() -> Unit = {}) : Unit = VIDEO(attributesMapOf("class", classes), consumer).visit(block)


